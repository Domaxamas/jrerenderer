package com.nvbn.tryrerenderer

import android.graphics.CornerPathEffect
import android.graphics.Paint
import android.graphics.Bitmap
import android.graphics.PorterDuffColorFilter
import android.graphics.SweepGradient
import android.graphics.ColorMatrixColorFilter
import android.graphics.Color
import android.graphics.Rasterizer
import android.graphics.LinearGradient
import android.graphics.BitmapShader
import android.util.DisplayMetrics
import android.graphics.EmbossMaskFilter
import android.graphics.Picture
import android.graphics.PixelXorXfermode
import android.graphics.Xfermode
import android.graphics.Typeface
import android.graphics.PorterDuff
import android.graphics.ColorFilter
import android.graphics.Rect
import java.io.InputStream
import android.graphics.BlurMaskFilter
import android.graphics.RectF
import android.graphics.ComposePathEffect
import android.graphics.LayerRasterizer
import android.content.res.AssetManager
import android.graphics.Matrix
import java.io.File
import android.graphics.Path
import android.graphics.DrawFilter
import android.graphics.RadialGradient
import android.graphics.SumPathEffect
import android.os.Parcelable
import android.graphics.MaskFilter
import android.graphics.Region
import java.util.Locale
import android.graphics.AvoidXfermode
import java.io.Closeable
import android.text.TextPaint
import android.os.Parcel
import android.graphics.DiscretePathEffect
import android.graphics.PathDashPathEffect
import android.graphics.Shader
import android.graphics.Canvas
import java.io.OutputStream
import android.graphics.PathEffect
import java.nio.Buffer
import android.graphics.PorterDuffXfermode
import android.graphics.DashPathEffect
import android.graphics.LightingColorFilter
import android.graphics.ComposeShader
import android.graphics.PaintFlagsDrawFilter


fun anyToByte(x: Any?): Byte = when (x) {
    is Short -> x.toByte()
    is Int -> x.toByte()
    is Long -> x.toByte()
    is Float -> x.toByte()
    is Double -> x.toByte()
    else -> x as Byte
}

fun anyToShort(x: Any?): Short = when (x) {
    is Byte -> x.toShort()
    is Int -> x.toShort()
    is Long -> x.toShort()
    is Float -> x.toShort()
    is Double -> x.toShort()
    else -> x as Short
}

fun anyToInt(x: Any?): Int = when (x) {
    is Byte -> x.toInt()
    is Short -> x.toInt()
    is Long -> x.toInt()
    is Float -> x.toInt()
    is Double -> x.toInt()
    else -> x as Int
}

fun anyToLong(x: Any?): Long = when (x) {
    is Byte -> x.toLong()
    is Short -> x.toLong()
    is Int -> x.toLong()
    is Float -> x.toLong()
    is Double -> x.toLong()
    else -> x as Long
}

fun anyToFloat(x: Any?): Float = when (x) {
    is Byte -> x.toFloat()
    is Short -> x.toFloat()
    is Int -> x.toFloat()
    is Long -> x.toFloat()
    is Double -> x.toFloat()
    else -> x as Float
}

fun anyToDouble(x: Any?): Double = when (x) {
    is Byte -> x.toDouble()
    is Short -> x.toDouble()
    is Int -> x.toDouble()
    is Long -> x.toDouble()
    is Float -> x.toDouble()
    else -> x as Double
}

fun doNew(vars: Map<String, Any?>, data: New): Any = when {
    (data.cls == "Path" && data.args.count() == 0) -> Path()
    (data.cls == "Path" && data.args.count() == 1) -> Path(data.args.get(0) as Path)
    (data.cls == "Picture" && data.args.count() == 0) -> Picture()
    (data.cls == "Picture" && data.args.count() == 1) -> Picture(data.args.get(0) as Picture)
    (data.cls == "Shader" && data.args.count() == 0) -> Shader()
    (data.cls == "Canvas" && data.args.count() == 0) -> Canvas()
    (data.cls == "Canvas" && data.args.count() == 1) -> Canvas(data.args.get(0) as Bitmap)
    (data.cls == "DrawFilter" && data.args.count() == 0) -> DrawFilter()
    (data.cls == "Paint\$FontMetricsInt" && data.args.count() == 0) -> Paint.FontMetricsInt()
    (data.cls == "RectF" && data.args.count() == 0) -> RectF()
    (data.cls == "RectF" && data.args.count() == 4) -> RectF(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.cls == "RectF" && data.args.count() == 1) -> RectF(data.args.get(0) as RectF)
    (data.cls == "RectF" && data.args.count() == 1) -> RectF(data.args.get(0) as Rect)
    (data.cls == "Matrix" && data.args.count() == 0) -> Matrix()
    (data.cls == "Matrix" && data.args.count() == 1) -> Matrix(data.args.get(0) as Matrix)
    (data.cls == "Rect" && data.args.count() == 0) -> Rect()
    (data.cls == "Rect" && data.args.count() == 4) -> Rect(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)))
    (data.cls == "Rect" && data.args.count() == 1) -> Rect(data.args.get(0) as Rect)
    (data.cls == "MaskFilter" && data.args.count() == 0) -> MaskFilter()
    (data.cls == "Region" && data.args.count() == 0) -> Region()
    (data.cls == "Region" && data.args.count() == 1) -> Region(data.args.get(0) as Region)
    (data.cls == "Region" && data.args.count() == 1) -> Region(data.args.get(0) as Rect)
    (data.cls == "Region" && data.args.count() == 4) -> Region(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)))
    (data.cls == "Paint\$FontMetrics" && data.args.count() == 0) -> Paint.FontMetrics()
    (data.cls == "Color" && data.args.count() == 0) -> Color()
    (data.cls == "Rasterizer" && data.args.count() == 0) -> Rasterizer()
    (data.cls == "Paint" && data.args.count() == 0) -> Paint()
    (data.cls == "Paint" && data.args.count() == 1) -> Paint(anyToInt(data.args.get(0)))
    (data.cls == "Paint" && data.args.count() == 1) -> Paint(data.args.get(0) as Paint)
    (data.cls == "PathEffect" && data.args.count() == 0) -> PathEffect()
    (data.cls == "Xfermode" && data.args.count() == 0) -> Xfermode()
    (data.cls == "ColorFilter" && data.args.count() == 0) -> ColorFilter()
    else -> throw Exception("Can't make instance of ${data.cls}")
}

fun doCall(vars: Map<String, Any?>, data: Call): Any = when {
    (data.objVar == "Canvas\$EdgeType" && data.method == "valueOf" && data.args.count() == 1) -> Canvas.EdgeType.valueOf(data.args.get(0) as String)
    (data.objVar == "Canvas\$EdgeType" && data.method == "values" && data.args.count() == 0) -> Canvas.EdgeType.values()
    (data.objVar is Path && data.method == "addArc" && data.args.count() == 3) -> data.objVar.addArc(data.args.get(0) as RectF, anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)))
    (data.objVar is Path && data.method == "addArc" && data.args.count() == 6) -> data.objVar.addArc(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), anyToFloat(data.args.get(4)), anyToFloat(data.args.get(5)))
    (data.objVar is Path && data.method == "addCircle" && data.args.count() == 4) -> data.objVar.addCircle(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), data.args.get(3) as Path.Direction)
    (data.objVar is Path && data.method == "addOval" && data.args.count() == 5) -> data.objVar.addOval(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), data.args.get(4) as Path.Direction)
    (data.objVar is Path && data.method == "addOval" && data.args.count() == 2) -> data.objVar.addOval(data.args.get(0) as RectF, data.args.get(1) as Path.Direction)
    (data.objVar is Path && data.method == "addPath" && data.args.count() == 3) -> data.objVar.addPath(data.args.get(0) as Path, anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)))
    (data.objVar is Path && data.method == "addPath" && data.args.count() == 1) -> data.objVar.addPath(data.args.get(0) as Path)
    (data.objVar is Path && data.method == "addPath" && data.args.count() == 2) -> data.objVar.addPath(data.args.get(0) as Path, data.args.get(1) as Matrix)
    (data.objVar is Path && data.method == "addRect" && data.args.count() == 5) -> data.objVar.addRect(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), data.args.get(4) as Path.Direction)
    (data.objVar is Path && data.method == "addRect" && data.args.count() == 2) -> data.objVar.addRect(data.args.get(0) as RectF, data.args.get(1) as Path.Direction)
    (data.objVar is Path && data.method == "addRoundRect" && data.args.count() == 7) -> data.objVar.addRoundRect(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), anyToFloat(data.args.get(4)), anyToFloat(data.args.get(5)), data.args.get(6) as Path.Direction)
    (data.objVar is Path && data.method == "addRoundRect" && data.args.count() == 6) -> data.objVar.addRoundRect(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), data.args.get(4) as FloatArray, data.args.get(5) as Path.Direction)
    (data.objVar is Path && data.method == "addRoundRect" && data.args.count() == 3) -> data.objVar.addRoundRect(data.args.get(0) as RectF, data.args.get(1) as FloatArray, data.args.get(2) as Path.Direction)
    (data.objVar is Path && data.method == "addRoundRect" && data.args.count() == 4) -> data.objVar.addRoundRect(data.args.get(0) as RectF, anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), data.args.get(3) as Path.Direction)
    (data.objVar is Path && data.method == "arcTo" && data.args.count() == 7) -> data.objVar.arcTo(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), anyToFloat(data.args.get(4)), anyToFloat(data.args.get(5)), data.args.get(6) as Boolean)
    (data.objVar is Path && data.method == "arcTo" && data.args.count() == 3) -> data.objVar.arcTo(data.args.get(0) as RectF, anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)))
    (data.objVar is Path && data.method == "arcTo" && data.args.count() == 4) -> data.objVar.arcTo(data.args.get(0) as RectF, anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), data.args.get(3) as Boolean)
    (data.objVar is Path && data.method == "close" && data.args.count() == 0) -> data.objVar.close()
    (data.objVar is Path && data.method == "computeBounds" && data.args.count() == 2) -> data.objVar.computeBounds(data.args.get(0) as RectF, data.args.get(1) as Boolean)
    (data.objVar is Path && data.method == "cubicTo" && data.args.count() == 6) -> data.objVar.cubicTo(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), anyToFloat(data.args.get(4)), anyToFloat(data.args.get(5)))
    (data.objVar is Path && data.method == "getFillType" && data.args.count() == 0) -> data.objVar.getFillType()
    (data.objVar is Path && data.method == "incReserve" && data.args.count() == 1) -> data.objVar.incReserve(anyToInt(data.args.get(0)))
    (data.objVar is Path && data.method == "isConvex" && data.args.count() == 0) -> data.objVar.isConvex()
    (data.objVar is Path && data.method == "isEmpty" && data.args.count() == 0) -> data.objVar.isEmpty()
    (data.objVar is Path && data.method == "isInverseFillType" && data.args.count() == 0) -> data.objVar.isInverseFillType()
    (data.objVar is Path && data.method == "isRect" && data.args.count() == 1) -> data.objVar.isRect(data.args.get(0) as RectF)
    (data.objVar is Path && data.method == "lineTo" && data.args.count() == 2) -> data.objVar.lineTo(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Path && data.method == "moveTo" && data.args.count() == 2) -> data.objVar.moveTo(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Path && data.method == "offset" && data.args.count() == 3) -> data.objVar.offset(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), data.args.get(2) as Path)
    (data.objVar is Path && data.method == "offset" && data.args.count() == 2) -> data.objVar.offset(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Path && data.method == "op" && data.args.count() == 3) -> data.objVar.op(data.args.get(0) as Path, data.args.get(1) as Path, data.args.get(2) as Path.Op)
    (data.objVar is Path && data.method == "op" && data.args.count() == 2) -> data.objVar.op(data.args.get(0) as Path, data.args.get(1) as Path.Op)
    (data.objVar is Path && data.method == "quadTo" && data.args.count() == 4) -> data.objVar.quadTo(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is Path && data.method == "rCubicTo" && data.args.count() == 6) -> data.objVar.rCubicTo(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), anyToFloat(data.args.get(4)), anyToFloat(data.args.get(5)))
    (data.objVar is Path && data.method == "rLineTo" && data.args.count() == 2) -> data.objVar.rLineTo(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Path && data.method == "rMoveTo" && data.args.count() == 2) -> data.objVar.rMoveTo(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Path && data.method == "rQuadTo" && data.args.count() == 4) -> data.objVar.rQuadTo(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is Path && data.method == "reset" && data.args.count() == 0) -> data.objVar.reset()
    (data.objVar is Path && data.method == "rewind" && data.args.count() == 0) -> data.objVar.rewind()
    (data.objVar is Path && data.method == "set" && data.args.count() == 1) -> data.objVar.set(data.args.get(0) as Path)
    (data.objVar is Path && data.method == "setFillType" && data.args.count() == 1) -> data.objVar.setFillType(data.args.get(0) as Path.FillType)
    (data.objVar is Path && data.method == "setLastPoint" && data.args.count() == 2) -> data.objVar.setLastPoint(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Path && data.method == "toggleInverseFillType" && data.args.count() == 0) -> data.objVar.toggleInverseFillType()
    (data.objVar is Path && data.method == "transform" && data.args.count() == 2) -> data.objVar.transform(data.args.get(0) as Matrix, data.args.get(1) as Path)
    (data.objVar is Path && data.method == "transform" && data.args.count() == 1) -> data.objVar.transform(data.args.get(0) as Matrix)
    (data.objVar is Picture && data.method == "beginRecording" && data.args.count() == 2) -> data.objVar.beginRecording(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)))
    (data.objVar == "Picture" && data.method == "createFromStream" && data.args.count() == 1) -> Picture.createFromStream(data.args.get(0) as InputStream)
    (data.objVar is Picture && data.method == "draw" && data.args.count() == 1) -> data.objVar.draw(data.args.get(0) as Canvas)
    (data.objVar is Picture && data.method == "endRecording" && data.args.count() == 0) -> data.objVar.endRecording()
    (data.objVar is Picture && data.method == "getHeight" && data.args.count() == 0) -> data.objVar.getHeight()
    (data.objVar is Picture && data.method == "getWidth" && data.args.count() == 0) -> data.objVar.getWidth()
    (data.objVar is Picture && data.method == "writeToStream" && data.args.count() == 1) -> data.objVar.writeToStream(data.args.get(0) as OutputStream)
    (data.objVar == "Path\$Op" && data.method == "valueOf" && data.args.count() == 1) -> Path.Op.valueOf(data.args.get(0) as String)
    (data.objVar == "Path\$Op" && data.method == "values" && data.args.count() == 0) -> Path.Op.values()
    (data.objVar == "Paint\$Style" && data.method == "valueOf" && data.args.count() == 1) -> Paint.Style.valueOf(data.args.get(0) as String)
    (data.objVar == "Paint\$Style" && data.method == "values" && data.args.count() == 0) -> Paint.Style.values()
    (data.objVar == "Paint\$Align" && data.method == "valueOf" && data.args.count() == 1) -> Paint.Align.valueOf(data.args.get(0) as String)
    (data.objVar == "Paint\$Align" && data.method == "values" && data.args.count() == 0) -> Paint.Align.values()
    (data.objVar == "Typeface" && data.method == "create" && data.args.count() == 2) -> Typeface.create(data.args.get(0) as String, anyToInt(data.args.get(1)))
    (data.objVar == "Typeface" && data.method == "create" && data.args.count() == 2) -> Typeface.create(data.args.get(0) as Typeface, anyToInt(data.args.get(1)))
    (data.objVar == "Typeface" && data.method == "createFromAsset" && data.args.count() == 2) -> Typeface.createFromAsset(data.args.get(0) as AssetManager, data.args.get(1) as String)
    (data.objVar == "Typeface" && data.method == "createFromFile" && data.args.count() == 1) -> Typeface.createFromFile(data.args.get(0) as String)
    (data.objVar == "Typeface" && data.method == "createFromFile" && data.args.count() == 1) -> Typeface.createFromFile(data.args.get(0) as File)
    (data.objVar == "Typeface" && data.method == "defaultFromStyle" && data.args.count() == 1) -> Typeface.defaultFromStyle(anyToInt(data.args.get(0)))
    (data.objVar is Typeface && data.method == "equals" && data.args.count() == 1) -> data.objVar.equals(data.args.get(0) as Any)
    (data.objVar is Typeface && data.method == "getStyle" && data.args.count() == 0) -> data.objVar.getStyle()
    (data.objVar is Typeface && data.method == "hashCode" && data.args.count() == 0) -> data.objVar.hashCode()
    (data.objVar is Typeface && data.method == "isBold" && data.args.count() == 0) -> data.objVar.isBold()
    (data.objVar is Typeface && data.method == "isItalic" && data.args.count() == 0) -> data.objVar.isItalic()
    (data.objVar is Shader && data.method == "getLocalMatrix" && data.args.count() == 1) -> data.objVar.getLocalMatrix(data.args.get(0) as Matrix)
    (data.objVar is Shader && data.method == "setLocalMatrix" && data.args.count() == 1) -> data.objVar.setLocalMatrix(data.args.get(0) as Matrix)
    (data.objVar is Canvas && data.method == "clipPath" && data.args.count() == 1) -> data.objVar.clipPath(data.args.get(0) as Path)
    (data.objVar is Canvas && data.method == "clipPath" && data.args.count() == 2) -> data.objVar.clipPath(data.args.get(0) as Path, data.args.get(1) as Region.Op)
    (data.objVar is Canvas && data.method == "clipRect" && data.args.count() == 2) -> data.objVar.clipRect(data.args.get(0) as Rect, data.args.get(1) as Region.Op)
    (data.objVar is Canvas && data.method == "clipRect" && data.args.count() == 2) -> data.objVar.clipRect(data.args.get(0) as RectF, data.args.get(1) as Region.Op)
    (data.objVar is Canvas && data.method == "clipRect" && data.args.count() == 4) -> data.objVar.clipRect(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)))
    (data.objVar is Canvas && data.method == "clipRect" && data.args.count() == 4) -> data.objVar.clipRect(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is Canvas && data.method == "clipRect" && data.args.count() == 1) -> data.objVar.clipRect(data.args.get(0) as RectF)
    (data.objVar is Canvas && data.method == "clipRect" && data.args.count() == 5) -> data.objVar.clipRect(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), data.args.get(4) as Region.Op)
    (data.objVar is Canvas && data.method == "clipRect" && data.args.count() == 1) -> data.objVar.clipRect(data.args.get(0) as Rect)
    (data.objVar is Canvas && data.method == "clipRegion" && data.args.count() == 1) -> data.objVar.clipRegion(data.args.get(0) as Region)
    (data.objVar is Canvas && data.method == "clipRegion" && data.args.count() == 2) -> data.objVar.clipRegion(data.args.get(0) as Region, data.args.get(1) as Region.Op)
    (data.objVar is Canvas && data.method == "concat" && data.args.count() == 1) -> data.objVar.concat(data.args.get(0) as Matrix)
    (data.objVar is Canvas && data.method == "drawARGB" && data.args.count() == 4) -> data.objVar.drawARGB(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)))
    (data.objVar is Canvas && data.method == "drawArc" && data.args.count() == 5) -> data.objVar.drawArc(data.args.get(0) as RectF, anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), data.args.get(3) as Boolean, data.args.get(4) as Paint)
    (data.objVar is Canvas && data.method == "drawArc" && data.args.count() == 8) -> data.objVar.drawArc(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), anyToFloat(data.args.get(4)), anyToFloat(data.args.get(5)), data.args.get(6) as Boolean, data.args.get(7) as Paint)
    (data.objVar is Canvas && data.method == "drawBitmap" && data.args.count() == 9) -> data.objVar.drawBitmap(data.args.get(0) as IntArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToFloat(data.args.get(3)), anyToFloat(data.args.get(4)), anyToInt(data.args.get(5)), anyToInt(data.args.get(6)), data.args.get(7) as Boolean, data.args.get(8) as Paint)
    (data.objVar is Canvas && data.method == "drawBitmap" && data.args.count() == 3) -> data.objVar.drawBitmap(data.args.get(0) as Bitmap, data.args.get(1) as Matrix, data.args.get(2) as Paint)
    (data.objVar is Canvas && data.method == "drawBitmap" && data.args.count() == 9) -> data.objVar.drawBitmap(data.args.get(0) as IntArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)), anyToInt(data.args.get(4)), anyToInt(data.args.get(5)), anyToInt(data.args.get(6)), data.args.get(7) as Boolean, data.args.get(8) as Paint)
    (data.objVar is Canvas && data.method == "drawBitmap" && data.args.count() == 4) -> data.objVar.drawBitmap(data.args.get(0) as Bitmap, data.args.get(1) as Rect, data.args.get(2) as RectF, data.args.get(3) as Paint)
    (data.objVar is Canvas && data.method == "drawBitmap" && data.args.count() == 4) -> data.objVar.drawBitmap(data.args.get(0) as Bitmap, anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), data.args.get(3) as Paint)
    (data.objVar is Canvas && data.method == "drawBitmap" && data.args.count() == 4) -> data.objVar.drawBitmap(data.args.get(0) as Bitmap, data.args.get(1) as Rect, data.args.get(2) as Rect, data.args.get(3) as Paint)
    (data.objVar is Canvas && data.method == "drawBitmapMesh" && data.args.count() == 8) -> data.objVar.drawBitmapMesh(data.args.get(0) as Bitmap, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), data.args.get(3) as FloatArray, anyToInt(data.args.get(4)), data.args.get(5) as IntArray, anyToInt(data.args.get(6)), data.args.get(7) as Paint)
    (data.objVar is Canvas && data.method == "drawCircle" && data.args.count() == 4) -> data.objVar.drawCircle(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), data.args.get(3) as Paint)
    (data.objVar is Canvas && data.method == "drawColor" && data.args.count() == 1) -> data.objVar.drawColor(anyToInt(data.args.get(0)))
    (data.objVar is Canvas && data.method == "drawColor" && data.args.count() == 2) -> data.objVar.drawColor(anyToInt(data.args.get(0)), data.args.get(1) as PorterDuff.Mode)
    (data.objVar is Canvas && data.method == "drawLine" && data.args.count() == 5) -> data.objVar.drawLine(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), data.args.get(4) as Paint)
    (data.objVar is Canvas && data.method == "drawLines" && data.args.count() == 2) -> data.objVar.drawLines(data.args.get(0) as FloatArray, data.args.get(1) as Paint)
    (data.objVar is Canvas && data.method == "drawLines" && data.args.count() == 4) -> data.objVar.drawLines(data.args.get(0) as FloatArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), data.args.get(3) as Paint)
    (data.objVar is Canvas && data.method == "drawOval" && data.args.count() == 5) -> data.objVar.drawOval(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), data.args.get(4) as Paint)
    (data.objVar is Canvas && data.method == "drawOval" && data.args.count() == 2) -> data.objVar.drawOval(data.args.get(0) as RectF, data.args.get(1) as Paint)
    (data.objVar is Canvas && data.method == "drawPaint" && data.args.count() == 1) -> data.objVar.drawPaint(data.args.get(0) as Paint)
    (data.objVar is Canvas && data.method == "drawPath" && data.args.count() == 2) -> data.objVar.drawPath(data.args.get(0) as Path, data.args.get(1) as Paint)
    (data.objVar is Canvas && data.method == "drawPicture" && data.args.count() == 2) -> data.objVar.drawPicture(data.args.get(0) as Picture, data.args.get(1) as RectF)
    (data.objVar is Canvas && data.method == "drawPicture" && data.args.count() == 1) -> data.objVar.drawPicture(data.args.get(0) as Picture)
    (data.objVar is Canvas && data.method == "drawPicture" && data.args.count() == 2) -> data.objVar.drawPicture(data.args.get(0) as Picture, data.args.get(1) as Rect)
    (data.objVar is Canvas && data.method == "drawPoint" && data.args.count() == 3) -> data.objVar.drawPoint(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), data.args.get(2) as Paint)
    (data.objVar is Canvas && data.method == "drawPoints" && data.args.count() == 4) -> data.objVar.drawPoints(data.args.get(0) as FloatArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), data.args.get(3) as Paint)
    (data.objVar is Canvas && data.method == "drawPoints" && data.args.count() == 2) -> data.objVar.drawPoints(data.args.get(0) as FloatArray, data.args.get(1) as Paint)
    (data.objVar is Canvas && data.method == "drawPosText" && data.args.count() == 5) -> data.objVar.drawPosText(data.args.get(0) as CharArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), data.args.get(3) as FloatArray, data.args.get(4) as Paint)
    (data.objVar is Canvas && data.method == "drawPosText" && data.args.count() == 3) -> data.objVar.drawPosText(data.args.get(0) as String, data.args.get(1) as FloatArray, data.args.get(2) as Paint)
    (data.objVar is Canvas && data.method == "drawRGB" && data.args.count() == 3) -> data.objVar.drawRGB(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)))
    (data.objVar is Canvas && data.method == "drawRect" && data.args.count() == 5) -> data.objVar.drawRect(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), data.args.get(4) as Paint)
    (data.objVar is Canvas && data.method == "drawRect" && data.args.count() == 2) -> data.objVar.drawRect(data.args.get(0) as RectF, data.args.get(1) as Paint)
    (data.objVar is Canvas && data.method == "drawRect" && data.args.count() == 2) -> data.objVar.drawRect(data.args.get(0) as Rect, data.args.get(1) as Paint)
    (data.objVar is Canvas && data.method == "drawRoundRect" && data.args.count() == 7) -> data.objVar.drawRoundRect(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), anyToFloat(data.args.get(4)), anyToFloat(data.args.get(5)), data.args.get(6) as Paint)
    (data.objVar is Canvas && data.method == "drawRoundRect" && data.args.count() == 4) -> data.objVar.drawRoundRect(data.args.get(0) as RectF, anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), data.args.get(3) as Paint)
    (data.objVar is Canvas && data.method == "drawText" && data.args.count() == 4) -> data.objVar.drawText(data.args.get(0) as String, anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), data.args.get(3) as Paint)
    (data.objVar is Canvas && data.method == "drawText" && data.args.count() == 6) -> data.objVar.drawText(data.args.get(0) as CharSequence, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToFloat(data.args.get(3)), anyToFloat(data.args.get(4)), data.args.get(5) as Paint)
    (data.objVar is Canvas && data.method == "drawText" && data.args.count() == 6) -> data.objVar.drawText(data.args.get(0) as CharArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToFloat(data.args.get(3)), anyToFloat(data.args.get(4)), data.args.get(5) as Paint)
    (data.objVar is Canvas && data.method == "drawText" && data.args.count() == 6) -> data.objVar.drawText(data.args.get(0) as String, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToFloat(data.args.get(3)), anyToFloat(data.args.get(4)), data.args.get(5) as Paint)
    (data.objVar is Canvas && data.method == "drawTextOnPath" && data.args.count() == 5) -> data.objVar.drawTextOnPath(data.args.get(0) as String, data.args.get(1) as Path, anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), data.args.get(4) as Paint)
    (data.objVar is Canvas && data.method == "drawTextOnPath" && data.args.count() == 7) -> data.objVar.drawTextOnPath(data.args.get(0) as CharArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), data.args.get(3) as Path, anyToFloat(data.args.get(4)), anyToFloat(data.args.get(5)), data.args.get(6) as Paint)
    (data.objVar is Canvas && data.method == "drawVertices" && data.args.count() == 12) -> data.objVar.drawVertices(data.args.get(0) as Canvas.VertexMode, anyToInt(data.args.get(1)), data.args.get(2) as FloatArray, anyToInt(data.args.get(3)), data.args.get(4) as FloatArray, anyToInt(data.args.get(5)), data.args.get(6) as IntArray, anyToInt(data.args.get(7)), data.args.get(8) as ShortArray, anyToInt(data.args.get(9)), anyToInt(data.args.get(10)), data.args.get(11) as Paint)
    (data.objVar is Canvas && data.method == "getClipBounds" && data.args.count() == 0) -> data.objVar.getClipBounds()
    (data.objVar is Canvas && data.method == "getClipBounds" && data.args.count() == 1) -> data.objVar.getClipBounds(data.args.get(0) as Rect)
    (data.objVar is Canvas && data.method == "getDensity" && data.args.count() == 0) -> data.objVar.getDensity()
    (data.objVar is Canvas && data.method == "getDrawFilter" && data.args.count() == 0) -> data.objVar.getDrawFilter()
    (data.objVar is Canvas && data.method == "getHeight" && data.args.count() == 0) -> data.objVar.getHeight()
    (data.objVar is Canvas && data.method == "getMatrix" && data.args.count() == 1) -> data.objVar.getMatrix(data.args.get(0) as Matrix)
    (data.objVar is Canvas && data.method == "getMatrix" && data.args.count() == 0) -> data.objVar.getMatrix()
    (data.objVar is Canvas && data.method == "getMaximumBitmapHeight" && data.args.count() == 0) -> data.objVar.getMaximumBitmapHeight()
    (data.objVar is Canvas && data.method == "getMaximumBitmapWidth" && data.args.count() == 0) -> data.objVar.getMaximumBitmapWidth()
    (data.objVar is Canvas && data.method == "getSaveCount" && data.args.count() == 0) -> data.objVar.getSaveCount()
    (data.objVar is Canvas && data.method == "getWidth" && data.args.count() == 0) -> data.objVar.getWidth()
    (data.objVar is Canvas && data.method == "isHardwareAccelerated" && data.args.count() == 0) -> data.objVar.isHardwareAccelerated()
    (data.objVar is Canvas && data.method == "isOpaque" && data.args.count() == 0) -> data.objVar.isOpaque()
    (data.objVar is Canvas && data.method == "quickReject" && data.args.count() == 2) -> data.objVar.quickReject(data.args.get(0) as Path, data.args.get(1) as Canvas.EdgeType)
    (data.objVar is Canvas && data.method == "quickReject" && data.args.count() == 5) -> data.objVar.quickReject(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), data.args.get(4) as Canvas.EdgeType)
    (data.objVar is Canvas && data.method == "quickReject" && data.args.count() == 2) -> data.objVar.quickReject(data.args.get(0) as RectF, data.args.get(1) as Canvas.EdgeType)
    (data.objVar is Canvas && data.method == "restore" && data.args.count() == 0) -> data.objVar.restore()
    (data.objVar is Canvas && data.method == "restoreToCount" && data.args.count() == 1) -> data.objVar.restoreToCount(anyToInt(data.args.get(0)))
    (data.objVar is Canvas && data.method == "rotate" && data.args.count() == 1) -> data.objVar.rotate(anyToFloat(data.args.get(0)))
    (data.objVar is Canvas && data.method == "rotate" && data.args.count() == 3) -> data.objVar.rotate(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)))
    (data.objVar is Canvas && data.method == "save" && data.args.count() == 0) -> data.objVar.save()
    (data.objVar is Canvas && data.method == "save" && data.args.count() == 1) -> data.objVar.save(anyToInt(data.args.get(0)))
    (data.objVar is Canvas && data.method == "saveLayer" && data.args.count() == 3) -> data.objVar.saveLayer(data.args.get(0) as RectF, data.args.get(1) as Paint, anyToInt(data.args.get(2)))
    (data.objVar is Canvas && data.method == "saveLayer" && data.args.count() == 2) -> data.objVar.saveLayer(data.args.get(0) as RectF, data.args.get(1) as Paint)
    (data.objVar is Canvas && data.method == "saveLayer" && data.args.count() == 5) -> data.objVar.saveLayer(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), data.args.get(4) as Paint)
    (data.objVar is Canvas && data.method == "saveLayer" && data.args.count() == 6) -> data.objVar.saveLayer(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), data.args.get(4) as Paint, anyToInt(data.args.get(5)))
    (data.objVar is Canvas && data.method == "saveLayerAlpha" && data.args.count() == 3) -> data.objVar.saveLayerAlpha(data.args.get(0) as RectF, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)))
    (data.objVar is Canvas && data.method == "saveLayerAlpha" && data.args.count() == 2) -> data.objVar.saveLayerAlpha(data.args.get(0) as RectF, anyToInt(data.args.get(1)))
    (data.objVar is Canvas && data.method == "saveLayerAlpha" && data.args.count() == 6) -> data.objVar.saveLayerAlpha(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), anyToInt(data.args.get(4)), anyToInt(data.args.get(5)))
    (data.objVar is Canvas && data.method == "saveLayerAlpha" && data.args.count() == 5) -> data.objVar.saveLayerAlpha(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)), anyToInt(data.args.get(4)))
    (data.objVar is Canvas && data.method == "scale" && data.args.count() == 2) -> data.objVar.scale(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Canvas && data.method == "scale" && data.args.count() == 4) -> data.objVar.scale(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is Canvas && data.method == "setBitmap" && data.args.count() == 1) -> data.objVar.setBitmap(data.args.get(0) as Bitmap)
    (data.objVar is Canvas && data.method == "setDensity" && data.args.count() == 1) -> data.objVar.setDensity(anyToInt(data.args.get(0)))
    (data.objVar is Canvas && data.method == "setDrawFilter" && data.args.count() == 1) -> data.objVar.setDrawFilter(data.args.get(0) as DrawFilter)
    (data.objVar is Canvas && data.method == "setMatrix" && data.args.count() == 1) -> data.objVar.setMatrix(data.args.get(0) as Matrix)
    (data.objVar is Canvas && data.method == "skew" && data.args.count() == 2) -> data.objVar.skew(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Canvas && data.method == "translate" && data.args.count() == 2) -> data.objVar.translate(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar == "Matrix\$ScaleToFit" && data.method == "valueOf" && data.args.count() == 1) -> Matrix.ScaleToFit.valueOf(data.args.get(0) as String)
    (data.objVar == "Matrix\$ScaleToFit" && data.method == "values" && data.args.count() == 0) -> Matrix.ScaleToFit.values()
    (data.objVar is Bitmap && data.method == "compress" && data.args.count() == 3) -> data.objVar.compress(data.args.get(0) as Bitmap.CompressFormat, anyToInt(data.args.get(1)), data.args.get(2) as OutputStream)
    (data.objVar is Bitmap && data.method == "copy" && data.args.count() == 2) -> data.objVar.copy(data.args.get(0) as Bitmap.Config, data.args.get(1) as Boolean)
    (data.objVar is Bitmap && data.method == "copyPixelsFromBuffer" && data.args.count() == 1) -> data.objVar.copyPixelsFromBuffer(data.args.get(0) as Buffer)
    (data.objVar is Bitmap && data.method == "copyPixelsToBuffer" && data.args.count() == 1) -> data.objVar.copyPixelsToBuffer(data.args.get(0) as Buffer)
    (data.objVar == "Bitmap" && data.method == "createBitmap" && data.args.count() == 5) -> Bitmap.createBitmap(data.args.get(0) as DisplayMetrics, data.args.get(1) as IntArray, anyToInt(data.args.get(2)), anyToInt(data.args.get(3)), data.args.get(4) as Bitmap.Config)
    (data.objVar == "Bitmap" && data.method == "createBitmap" && data.args.count() == 7) -> Bitmap.createBitmap(data.args.get(0) as DisplayMetrics, data.args.get(1) as IntArray, anyToInt(data.args.get(2)), anyToInt(data.args.get(3)), anyToInt(data.args.get(4)), anyToInt(data.args.get(5)), data.args.get(6) as Bitmap.Config)
    (data.objVar == "Bitmap" && data.method == "createBitmap" && data.args.count() == 5) -> Bitmap.createBitmap(data.args.get(0) as Bitmap, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)), anyToInt(data.args.get(4)))
    (data.objVar == "Bitmap" && data.method == "createBitmap" && data.args.count() == 1) -> Bitmap.createBitmap(data.args.get(0) as Bitmap)
    (data.objVar == "Bitmap" && data.method == "createBitmap" && data.args.count() == 4) -> Bitmap.createBitmap(data.args.get(0) as DisplayMetrics, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), data.args.get(3) as Bitmap.Config)
    (data.objVar == "Bitmap" && data.method == "createBitmap" && data.args.count() == 7) -> Bitmap.createBitmap(data.args.get(0) as Bitmap, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)), anyToInt(data.args.get(4)), data.args.get(5) as Matrix, data.args.get(6) as Boolean)
    (data.objVar == "Bitmap" && data.method == "createBitmap" && data.args.count() == 3) -> Bitmap.createBitmap(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), data.args.get(2) as Bitmap.Config)
    (data.objVar == "Bitmap" && data.method == "createBitmap" && data.args.count() == 6) -> Bitmap.createBitmap(data.args.get(0) as IntArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)), anyToInt(data.args.get(4)), data.args.get(5) as Bitmap.Config)
    (data.objVar == "Bitmap" && data.method == "createBitmap" && data.args.count() == 4) -> Bitmap.createBitmap(data.args.get(0) as IntArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), data.args.get(3) as Bitmap.Config)
    (data.objVar == "Bitmap" && data.method == "createScaledBitmap" && data.args.count() == 4) -> Bitmap.createScaledBitmap(data.args.get(0) as Bitmap, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), data.args.get(3) as Boolean)
    (data.objVar is Bitmap && data.method == "describeContents" && data.args.count() == 0) -> data.objVar.describeContents()
    (data.objVar is Bitmap && data.method == "eraseColor" && data.args.count() == 1) -> data.objVar.eraseColor(anyToInt(data.args.get(0)))
    (data.objVar is Bitmap && data.method == "extractAlpha" && data.args.count() == 0) -> data.objVar.extractAlpha()
    (data.objVar is Bitmap && data.method == "extractAlpha" && data.args.count() == 2) -> data.objVar.extractAlpha(data.args.get(0) as Paint, data.args.get(1) as IntArray)
    (data.objVar is Bitmap && data.method == "getAllocationByteCount" && data.args.count() == 0) -> data.objVar.getAllocationByteCount()
    (data.objVar is Bitmap && data.method == "getByteCount" && data.args.count() == 0) -> data.objVar.getByteCount()
    (data.objVar is Bitmap && data.method == "getConfig" && data.args.count() == 0) -> data.objVar.getConfig()
    (data.objVar is Bitmap && data.method == "getDensity" && data.args.count() == 0) -> data.objVar.getDensity()
    (data.objVar is Bitmap && data.method == "getGenerationId" && data.args.count() == 0) -> data.objVar.getGenerationId()
    (data.objVar is Bitmap && data.method == "getHeight" && data.args.count() == 0) -> data.objVar.getHeight()
    (data.objVar is Bitmap && data.method == "getNinePatchChunk" && data.args.count() == 0) -> data.objVar.getNinePatchChunk()
    (data.objVar is Bitmap && data.method == "getPixel" && data.args.count() == 2) -> data.objVar.getPixel(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)))
    (data.objVar is Bitmap && data.method == "getPixels" && data.args.count() == 7) -> data.objVar.getPixels(data.args.get(0) as IntArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)), anyToInt(data.args.get(4)), anyToInt(data.args.get(5)), anyToInt(data.args.get(6)))
    (data.objVar is Bitmap && data.method == "getRowBytes" && data.args.count() == 0) -> data.objVar.getRowBytes()
    (data.objVar is Bitmap && data.method == "getScaledHeight" && data.args.count() == 1) -> data.objVar.getScaledHeight(data.args.get(0) as DisplayMetrics)
    (data.objVar is Bitmap && data.method == "getScaledHeight" && data.args.count() == 1) -> data.objVar.getScaledHeight(anyToInt(data.args.get(0)))
    (data.objVar is Bitmap && data.method == "getScaledHeight" && data.args.count() == 1) -> data.objVar.getScaledHeight(data.args.get(0) as Canvas)
    (data.objVar is Bitmap && data.method == "getScaledWidth" && data.args.count() == 1) -> data.objVar.getScaledWidth(anyToInt(data.args.get(0)))
    (data.objVar is Bitmap && data.method == "getScaledWidth" && data.args.count() == 1) -> data.objVar.getScaledWidth(data.args.get(0) as DisplayMetrics)
    (data.objVar is Bitmap && data.method == "getScaledWidth" && data.args.count() == 1) -> data.objVar.getScaledWidth(data.args.get(0) as Canvas)
    (data.objVar is Bitmap && data.method == "getWidth" && data.args.count() == 0) -> data.objVar.getWidth()
    (data.objVar is Bitmap && data.method == "hasAlpha" && data.args.count() == 0) -> data.objVar.hasAlpha()
    (data.objVar is Bitmap && data.method == "hasMipMap" && data.args.count() == 0) -> data.objVar.hasMipMap()
    (data.objVar is Bitmap && data.method == "isMutable" && data.args.count() == 0) -> data.objVar.isMutable()
    (data.objVar is Bitmap && data.method == "isPremultiplied" && data.args.count() == 0) -> data.objVar.isPremultiplied()
    (data.objVar is Bitmap && data.method == "isRecycled" && data.args.count() == 0) -> data.objVar.isRecycled()
    (data.objVar is Bitmap && data.method == "prepareToDraw" && data.args.count() == 0) -> data.objVar.prepareToDraw()
    (data.objVar is Bitmap && data.method == "reconfigure" && data.args.count() == 3) -> data.objVar.reconfigure(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), data.args.get(2) as Bitmap.Config)
    (data.objVar is Bitmap && data.method == "recycle" && data.args.count() == 0) -> data.objVar.recycle()
    (data.objVar is Bitmap && data.method == "sameAs" && data.args.count() == 1) -> data.objVar.sameAs(data.args.get(0) as Bitmap)
    (data.objVar is Bitmap && data.method == "setConfig" && data.args.count() == 1) -> data.objVar.setConfig(data.args.get(0) as Bitmap.Config)
    (data.objVar is Bitmap && data.method == "setDensity" && data.args.count() == 1) -> data.objVar.setDensity(anyToInt(data.args.get(0)))
    (data.objVar is Bitmap && data.method == "setHasAlpha" && data.args.count() == 1) -> data.objVar.setHasAlpha(data.args.get(0) as Boolean)
    (data.objVar is Bitmap && data.method == "setHasMipMap" && data.args.count() == 1) -> data.objVar.setHasMipMap(data.args.get(0) as Boolean)
    (data.objVar is Bitmap && data.method == "setHeight" && data.args.count() == 1) -> data.objVar.setHeight(anyToInt(data.args.get(0)))
    (data.objVar is Bitmap && data.method == "setPixel" && data.args.count() == 3) -> data.objVar.setPixel(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)))
    (data.objVar is Bitmap && data.method == "setPixels" && data.args.count() == 7) -> data.objVar.setPixels(data.args.get(0) as IntArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)), anyToInt(data.args.get(4)), anyToInt(data.args.get(5)), anyToInt(data.args.get(6)))
    (data.objVar is Bitmap && data.method == "setPremultiplied" && data.args.count() == 1) -> data.objVar.setPremultiplied(data.args.get(0) as Boolean)
    (data.objVar is Bitmap && data.method == "setWidth" && data.args.count() == 1) -> data.objVar.setWidth(anyToInt(data.args.get(0)))
    (data.objVar is Bitmap && data.method == "writeToParcel" && data.args.count() == 2) -> data.objVar.writeToParcel(data.args.get(0) as Parcel, anyToInt(data.args.get(1)))
    (data.objVar == "Bitmap\$Config" && data.method == "valueOf" && data.args.count() == 1) -> Bitmap.Config.valueOf(data.args.get(0) as String)
    (data.objVar == "Bitmap\$Config" && data.method == "values" && data.args.count() == 0) -> Bitmap.Config.values()
    (data.objVar == "Canvas\$VertexMode" && data.method == "valueOf" && data.args.count() == 1) -> Canvas.VertexMode.valueOf(data.args.get(0) as String)
    (data.objVar == "Canvas\$VertexMode" && data.method == "values" && data.args.count() == 0) -> Canvas.VertexMode.values()
    (data.objVar is Paint.FontMetricsInt && data.method == "toString" && data.args.count() == 0) -> data.objVar.toString()
    (data.objVar == "PorterDuff\$Mode" && data.method == "valueOf" && data.args.count() == 1) -> PorterDuff.Mode.valueOf(data.args.get(0) as String)
    (data.objVar == "PorterDuff\$Mode" && data.method == "values" && data.args.count() == 0) -> PorterDuff.Mode.values()
    (data.objVar is RectF && data.method == "centerX" && data.args.count() == 0) -> data.objVar.centerX()
    (data.objVar is RectF && data.method == "centerY" && data.args.count() == 0) -> data.objVar.centerY()
    (data.objVar is RectF && data.method == "contains" && data.args.count() == 4) -> data.objVar.contains(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is RectF && data.method == "contains" && data.args.count() == 2) -> data.objVar.contains(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is RectF && data.method == "contains" && data.args.count() == 1) -> data.objVar.contains(data.args.get(0) as RectF)
    (data.objVar is RectF && data.method == "describeContents" && data.args.count() == 0) -> data.objVar.describeContents()
    (data.objVar is RectF && data.method == "equals" && data.args.count() == 1) -> data.objVar.equals(data.args.get(0) as Any)
    (data.objVar is RectF && data.method == "hashCode" && data.args.count() == 0) -> data.objVar.hashCode()
    (data.objVar is RectF && data.method == "height" && data.args.count() == 0) -> data.objVar.height()
    (data.objVar is RectF && data.method == "inset" && data.args.count() == 2) -> data.objVar.inset(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is RectF && data.method == "intersect" && data.args.count() == 4) -> data.objVar.intersect(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is RectF && data.method == "intersect" && data.args.count() == 1) -> data.objVar.intersect(data.args.get(0) as RectF)
    (data.objVar == "RectF" && data.method == "intersects" && data.args.count() == 2) -> RectF.intersects(data.args.get(0) as RectF, data.args.get(1) as RectF)
    (data.objVar is RectF && data.method == "intersects" && data.args.count() == 4) -> data.objVar.intersects(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is RectF && data.method == "isEmpty" && data.args.count() == 0) -> data.objVar.isEmpty()
    (data.objVar is RectF && data.method == "offset" && data.args.count() == 2) -> data.objVar.offset(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is RectF && data.method == "offsetTo" && data.args.count() == 2) -> data.objVar.offsetTo(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is RectF && data.method == "readFromParcel" && data.args.count() == 1) -> data.objVar.readFromParcel(data.args.get(0) as Parcel)
    (data.objVar is RectF && data.method == "round" && data.args.count() == 1) -> data.objVar.round(data.args.get(0) as Rect)
    (data.objVar is RectF && data.method == "roundOut" && data.args.count() == 1) -> data.objVar.roundOut(data.args.get(0) as Rect)
    (data.objVar is RectF && data.method == "set" && data.args.count() == 4) -> data.objVar.set(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is RectF && data.method == "set" && data.args.count() == 1) -> data.objVar.set(data.args.get(0) as RectF)
    (data.objVar is RectF && data.method == "set" && data.args.count() == 1) -> data.objVar.set(data.args.get(0) as Rect)
    (data.objVar is RectF && data.method == "setEmpty" && data.args.count() == 0) -> data.objVar.setEmpty()
    (data.objVar is RectF && data.method == "setIntersect" && data.args.count() == 2) -> data.objVar.setIntersect(data.args.get(0) as RectF, data.args.get(1) as RectF)
    (data.objVar is RectF && data.method == "sort" && data.args.count() == 0) -> data.objVar.sort()
    (data.objVar is RectF && data.method == "toShortString" && data.args.count() == 0) -> data.objVar.toShortString()
    (data.objVar is RectF && data.method == "toString" && data.args.count() == 0) -> data.objVar.toString()
    (data.objVar is RectF && data.method == "union" && data.args.count() == 4) -> data.objVar.union(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is RectF && data.method == "union" && data.args.count() == 1) -> data.objVar.union(data.args.get(0) as RectF)
    (data.objVar is RectF && data.method == "union" && data.args.count() == 2) -> data.objVar.union(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is RectF && data.method == "width" && data.args.count() == 0) -> data.objVar.width()
    (data.objVar is RectF && data.method == "writeToParcel" && data.args.count() == 2) -> data.objVar.writeToParcel(data.args.get(0) as Parcel, anyToInt(data.args.get(1)))
    (data.objVar == "Paint\$Join" && data.method == "valueOf" && data.args.count() == 1) -> Paint.Join.valueOf(data.args.get(0) as String)
    (data.objVar == "Paint\$Join" && data.method == "values" && data.args.count() == 0) -> Paint.Join.values()
    (data.objVar is Matrix && data.method == "equals" && data.args.count() == 1) -> data.objVar.equals(data.args.get(0) as Any)
    (data.objVar is Matrix && data.method == "getValues" && data.args.count() == 1) -> data.objVar.getValues(data.args.get(0) as FloatArray)
    (data.objVar is Matrix && data.method == "hashCode" && data.args.count() == 0) -> data.objVar.hashCode()
    (data.objVar is Matrix && data.method == "invert" && data.args.count() == 1) -> data.objVar.invert(data.args.get(0) as Matrix)
    (data.objVar is Matrix && data.method == "isAffine" && data.args.count() == 0) -> data.objVar.isAffine()
    (data.objVar is Matrix && data.method == "isIdentity" && data.args.count() == 0) -> data.objVar.isIdentity()
    (data.objVar is Matrix && data.method == "mapPoints" && data.args.count() == 1) -> data.objVar.mapPoints(data.args.get(0) as FloatArray)
    (data.objVar is Matrix && data.method == "mapPoints" && data.args.count() == 5) -> data.objVar.mapPoints(data.args.get(0) as FloatArray, anyToInt(data.args.get(1)), data.args.get(2) as FloatArray, anyToInt(data.args.get(3)), anyToInt(data.args.get(4)))
    (data.objVar is Matrix && data.method == "mapPoints" && data.args.count() == 2) -> data.objVar.mapPoints(data.args.get(0) as FloatArray, data.args.get(1) as FloatArray)
    (data.objVar is Matrix && data.method == "mapRadius" && data.args.count() == 1) -> data.objVar.mapRadius(anyToFloat(data.args.get(0)))
    (data.objVar is Matrix && data.method == "mapRect" && data.args.count() == 2) -> data.objVar.mapRect(data.args.get(0) as RectF, data.args.get(1) as RectF)
    (data.objVar is Matrix && data.method == "mapRect" && data.args.count() == 1) -> data.objVar.mapRect(data.args.get(0) as RectF)
    (data.objVar is Matrix && data.method == "mapVectors" && data.args.count() == 2) -> data.objVar.mapVectors(data.args.get(0) as FloatArray, data.args.get(1) as FloatArray)
    (data.objVar is Matrix && data.method == "mapVectors" && data.args.count() == 1) -> data.objVar.mapVectors(data.args.get(0) as FloatArray)
    (data.objVar is Matrix && data.method == "mapVectors" && data.args.count() == 5) -> data.objVar.mapVectors(data.args.get(0) as FloatArray, anyToInt(data.args.get(1)), data.args.get(2) as FloatArray, anyToInt(data.args.get(3)), anyToInt(data.args.get(4)))
    (data.objVar is Matrix && data.method == "postConcat" && data.args.count() == 1) -> data.objVar.postConcat(data.args.get(0) as Matrix)
    (data.objVar is Matrix && data.method == "postRotate" && data.args.count() == 1) -> data.objVar.postRotate(anyToFloat(data.args.get(0)))
    (data.objVar is Matrix && data.method == "postRotate" && data.args.count() == 3) -> data.objVar.postRotate(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)))
    (data.objVar is Matrix && data.method == "postScale" && data.args.count() == 2) -> data.objVar.postScale(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Matrix && data.method == "postScale" && data.args.count() == 4) -> data.objVar.postScale(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is Matrix && data.method == "postSkew" && data.args.count() == 4) -> data.objVar.postSkew(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is Matrix && data.method == "postSkew" && data.args.count() == 2) -> data.objVar.postSkew(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Matrix && data.method == "postTranslate" && data.args.count() == 2) -> data.objVar.postTranslate(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Matrix && data.method == "preConcat" && data.args.count() == 1) -> data.objVar.preConcat(data.args.get(0) as Matrix)
    (data.objVar is Matrix && data.method == "preRotate" && data.args.count() == 1) -> data.objVar.preRotate(anyToFloat(data.args.get(0)))
    (data.objVar is Matrix && data.method == "preRotate" && data.args.count() == 3) -> data.objVar.preRotate(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)))
    (data.objVar is Matrix && data.method == "preScale" && data.args.count() == 2) -> data.objVar.preScale(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Matrix && data.method == "preScale" && data.args.count() == 4) -> data.objVar.preScale(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is Matrix && data.method == "preSkew" && data.args.count() == 4) -> data.objVar.preSkew(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is Matrix && data.method == "preSkew" && data.args.count() == 2) -> data.objVar.preSkew(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Matrix && data.method == "preTranslate" && data.args.count() == 2) -> data.objVar.preTranslate(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Matrix && data.method == "rectStaysRect" && data.args.count() == 0) -> data.objVar.rectStaysRect()
    (data.objVar is Matrix && data.method == "reset" && data.args.count() == 0) -> data.objVar.reset()
    (data.objVar is Matrix && data.method == "set" && data.args.count() == 1) -> data.objVar.set(data.args.get(0) as Matrix)
    (data.objVar is Matrix && data.method == "setConcat" && data.args.count() == 2) -> data.objVar.setConcat(data.args.get(0) as Matrix, data.args.get(1) as Matrix)
    (data.objVar is Matrix && data.method == "setPolyToPoly" && data.args.count() == 5) -> data.objVar.setPolyToPoly(data.args.get(0) as FloatArray, anyToInt(data.args.get(1)), data.args.get(2) as FloatArray, anyToInt(data.args.get(3)), anyToInt(data.args.get(4)))
    (data.objVar is Matrix && data.method == "setRectToRect" && data.args.count() == 3) -> data.objVar.setRectToRect(data.args.get(0) as RectF, data.args.get(1) as RectF, data.args.get(2) as Matrix.ScaleToFit)
    (data.objVar is Matrix && data.method == "setRotate" && data.args.count() == 1) -> data.objVar.setRotate(anyToFloat(data.args.get(0)))
    (data.objVar is Matrix && data.method == "setRotate" && data.args.count() == 3) -> data.objVar.setRotate(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)))
    (data.objVar is Matrix && data.method == "setScale" && data.args.count() == 4) -> data.objVar.setScale(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is Matrix && data.method == "setScale" && data.args.count() == 2) -> data.objVar.setScale(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Matrix && data.method == "setSinCos" && data.args.count() == 2) -> data.objVar.setSinCos(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Matrix && data.method == "setSinCos" && data.args.count() == 4) -> data.objVar.setSinCos(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is Matrix && data.method == "setSkew" && data.args.count() == 4) -> data.objVar.setSkew(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToFloat(data.args.get(3)))
    (data.objVar is Matrix && data.method == "setSkew" && data.args.count() == 2) -> data.objVar.setSkew(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Matrix && data.method == "setTranslate" && data.args.count() == 2) -> data.objVar.setTranslate(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)))
    (data.objVar is Matrix && data.method == "setValues" && data.args.count() == 1) -> data.objVar.setValues(data.args.get(0) as FloatArray)
    (data.objVar is Matrix && data.method == "toShortString" && data.args.count() == 0) -> data.objVar.toShortString()
    (data.objVar is Matrix && data.method == "toString" && data.args.count() == 0) -> data.objVar.toString()
    (data.objVar is Rect && data.method == "centerX" && data.args.count() == 0) -> data.objVar.centerX()
    (data.objVar is Rect && data.method == "centerY" && data.args.count() == 0) -> data.objVar.centerY()
    (data.objVar is Rect && data.method == "contains" && data.args.count() == 2) -> data.objVar.contains(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)))
    (data.objVar is Rect && data.method == "contains" && data.args.count() == 4) -> data.objVar.contains(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)))
    (data.objVar is Rect && data.method == "contains" && data.args.count() == 1) -> data.objVar.contains(data.args.get(0) as Rect)
    (data.objVar is Rect && data.method == "describeContents" && data.args.count() == 0) -> data.objVar.describeContents()
    (data.objVar is Rect && data.method == "equals" && data.args.count() == 1) -> data.objVar.equals(data.args.get(0) as Any)
    (data.objVar is Rect && data.method == "exactCenterX" && data.args.count() == 0) -> data.objVar.exactCenterX()
    (data.objVar is Rect && data.method == "exactCenterY" && data.args.count() == 0) -> data.objVar.exactCenterY()
    (data.objVar is Rect && data.method == "flattenToString" && data.args.count() == 0) -> data.objVar.flattenToString()
    (data.objVar is Rect && data.method == "hashCode" && data.args.count() == 0) -> data.objVar.hashCode()
    (data.objVar is Rect && data.method == "height" && data.args.count() == 0) -> data.objVar.height()
    (data.objVar is Rect && data.method == "inset" && data.args.count() == 2) -> data.objVar.inset(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)))
    (data.objVar is Rect && data.method == "intersect" && data.args.count() == 1) -> data.objVar.intersect(data.args.get(0) as Rect)
    (data.objVar is Rect && data.method == "intersect" && data.args.count() == 4) -> data.objVar.intersect(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)))
    (data.objVar is Rect && data.method == "intersects" && data.args.count() == 4) -> data.objVar.intersects(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)))
    (data.objVar == "Rect" && data.method == "intersects" && data.args.count() == 2) -> Rect.intersects(data.args.get(0) as Rect, data.args.get(1) as Rect)
    (data.objVar is Rect && data.method == "isEmpty" && data.args.count() == 0) -> data.objVar.isEmpty()
    (data.objVar is Rect && data.method == "offset" && data.args.count() == 2) -> data.objVar.offset(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)))
    (data.objVar is Rect && data.method == "offsetTo" && data.args.count() == 2) -> data.objVar.offsetTo(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)))
    (data.objVar is Rect && data.method == "readFromParcel" && data.args.count() == 1) -> data.objVar.readFromParcel(data.args.get(0) as Parcel)
    (data.objVar is Rect && data.method == "set" && data.args.count() == 4) -> data.objVar.set(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)))
    (data.objVar is Rect && data.method == "set" && data.args.count() == 1) -> data.objVar.set(data.args.get(0) as Rect)
    (data.objVar is Rect && data.method == "setEmpty" && data.args.count() == 0) -> data.objVar.setEmpty()
    (data.objVar is Rect && data.method == "setIntersect" && data.args.count() == 2) -> data.objVar.setIntersect(data.args.get(0) as Rect, data.args.get(1) as Rect)
    (data.objVar is Rect && data.method == "sort" && data.args.count() == 0) -> data.objVar.sort()
    (data.objVar is Rect && data.method == "toShortString" && data.args.count() == 0) -> data.objVar.toShortString()
    (data.objVar is Rect && data.method == "toString" && data.args.count() == 0) -> data.objVar.toString()
    (data.objVar == "Rect" && data.method == "unflattenFromString" && data.args.count() == 1) -> Rect.unflattenFromString(data.args.get(0) as String)
    (data.objVar is Rect && data.method == "union" && data.args.count() == 4) -> data.objVar.union(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)))
    (data.objVar is Rect && data.method == "union" && data.args.count() == 1) -> data.objVar.union(data.args.get(0) as Rect)
    (data.objVar is Rect && data.method == "union" && data.args.count() == 2) -> data.objVar.union(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)))
    (data.objVar is Rect && data.method == "width" && data.args.count() == 0) -> data.objVar.width()
    (data.objVar is Rect && data.method == "writeToParcel" && data.args.count() == 2) -> data.objVar.writeToParcel(data.args.get(0) as Parcel, anyToInt(data.args.get(1)))
    (data.objVar == "Region\$Op" && data.method == "valueOf" && data.args.count() == 1) -> Region.Op.valueOf(data.args.get(0) as String)
    (data.objVar == "Region\$Op" && data.method == "values" && data.args.count() == 0) -> Region.Op.values()
    (data.objVar == "Paint\$Cap" && data.method == "valueOf" && data.args.count() == 1) -> Paint.Cap.valueOf(data.args.get(0) as String)
    (data.objVar == "Paint\$Cap" && data.method == "values" && data.args.count() == 0) -> Paint.Cap.values()
    (data.objVar == "Path\$FillType" && data.method == "valueOf" && data.args.count() == 1) -> Path.FillType.valueOf(data.args.get(0) as String)
    (data.objVar == "Path\$FillType" && data.method == "values" && data.args.count() == 0) -> Path.FillType.values()
    (data.objVar is Region && data.method == "contains" && data.args.count() == 2) -> data.objVar.contains(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)))
    (data.objVar is Region && data.method == "describeContents" && data.args.count() == 0) -> data.objVar.describeContents()
    (data.objVar is Region && data.method == "equals" && data.args.count() == 1) -> data.objVar.equals(data.args.get(0) as Any)
    (data.objVar is Region && data.method == "getBoundaryPath" && data.args.count() == 0) -> data.objVar.getBoundaryPath()
    (data.objVar is Region && data.method == "getBoundaryPath" && data.args.count() == 1) -> data.objVar.getBoundaryPath(data.args.get(0) as Path)
    (data.objVar is Region && data.method == "getBounds" && data.args.count() == 1) -> data.objVar.getBounds(data.args.get(0) as Rect)
    (data.objVar is Region && data.method == "getBounds" && data.args.count() == 0) -> data.objVar.getBounds()
    (data.objVar is Region && data.method == "isComplex" && data.args.count() == 0) -> data.objVar.isComplex()
    (data.objVar is Region && data.method == "isEmpty" && data.args.count() == 0) -> data.objVar.isEmpty()
    (data.objVar is Region && data.method == "isRect" && data.args.count() == 0) -> data.objVar.isRect()
    (data.objVar is Region && data.method == "op" && data.args.count() == 2) -> data.objVar.op(data.args.get(0) as Rect, data.args.get(1) as Region.Op)
    (data.objVar is Region && data.method == "op" && data.args.count() == 5) -> data.objVar.op(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)), data.args.get(4) as Region.Op)
    (data.objVar is Region && data.method == "op" && data.args.count() == 2) -> data.objVar.op(data.args.get(0) as Region, data.args.get(1) as Region.Op)
    (data.objVar is Region && data.method == "op" && data.args.count() == 3) -> data.objVar.op(data.args.get(0) as Rect, data.args.get(1) as Region, data.args.get(2) as Region.Op)
    (data.objVar is Region && data.method == "op" && data.args.count() == 3) -> data.objVar.op(data.args.get(0) as Region, data.args.get(1) as Region, data.args.get(2) as Region.Op)
    (data.objVar is Region && data.method == "quickContains" && data.args.count() == 4) -> data.objVar.quickContains(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)))
    (data.objVar is Region && data.method == "quickContains" && data.args.count() == 1) -> data.objVar.quickContains(data.args.get(0) as Rect)
    (data.objVar is Region && data.method == "quickReject" && data.args.count() == 4) -> data.objVar.quickReject(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)))
    (data.objVar is Region && data.method == "quickReject" && data.args.count() == 1) -> data.objVar.quickReject(data.args.get(0) as Region)
    (data.objVar is Region && data.method == "quickReject" && data.args.count() == 1) -> data.objVar.quickReject(data.args.get(0) as Rect)
    (data.objVar is Region && data.method == "set" && data.args.count() == 4) -> data.objVar.set(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)))
    (data.objVar is Region && data.method == "set" && data.args.count() == 1) -> data.objVar.set(data.args.get(0) as Rect)
    (data.objVar is Region && data.method == "set" && data.args.count() == 1) -> data.objVar.set(data.args.get(0) as Region)
    (data.objVar is Region && data.method == "setEmpty" && data.args.count() == 0) -> data.objVar.setEmpty()
    (data.objVar is Region && data.method == "setPath" && data.args.count() == 2) -> data.objVar.setPath(data.args.get(0) as Path, data.args.get(1) as Region)
    (data.objVar is Region && data.method == "toString" && data.args.count() == 0) -> data.objVar.toString()
    (data.objVar is Region && data.method == "translate" && data.args.count() == 3) -> data.objVar.translate(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), data.args.get(2) as Region)
    (data.objVar is Region && data.method == "translate" && data.args.count() == 2) -> data.objVar.translate(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)))
    (data.objVar is Region && data.method == "union" && data.args.count() == 1) -> data.objVar.union(data.args.get(0) as Rect)
    (data.objVar is Region && data.method == "writeToParcel" && data.args.count() == 2) -> data.objVar.writeToParcel(data.args.get(0) as Parcel, anyToInt(data.args.get(1)))
    (data.objVar == "Color" && data.method == "HSVToColor" && data.args.count() == 1) -> Color.HSVToColor(data.args.get(0) as FloatArray)
    (data.objVar == "Color" && data.method == "HSVToColor" && data.args.count() == 2) -> Color.HSVToColor(anyToInt(data.args.get(0)), data.args.get(1) as FloatArray)
    (data.objVar == "Color" && data.method == "RGBToHSV" && data.args.count() == 4) -> Color.RGBToHSV(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), data.args.get(3) as FloatArray)
    (data.objVar == "Color" && data.method == "alpha" && data.args.count() == 1) -> Color.alpha(anyToInt(data.args.get(0)))
    (data.objVar == "Color" && data.method == "argb" && data.args.count() == 4) -> Color.argb(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)))
    (data.objVar == "Color" && data.method == "blue" && data.args.count() == 1) -> Color.blue(anyToInt(data.args.get(0)))
    (data.objVar == "Color" && data.method == "colorToHSV" && data.args.count() == 2) -> Color.colorToHSV(anyToInt(data.args.get(0)), data.args.get(1) as FloatArray)
    (data.objVar == "Color" && data.method == "green" && data.args.count() == 1) -> Color.green(anyToInt(data.args.get(0)))
    (data.objVar == "Color" && data.method == "parseColor" && data.args.count() == 1) -> Color.parseColor(data.args.get(0) as String)
    (data.objVar == "Color" && data.method == "red" && data.args.count() == 1) -> Color.red(anyToInt(data.args.get(0)))
    (data.objVar == "Color" && data.method == "rgb" && data.args.count() == 3) -> Color.rgb(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)))
    (data.objVar is Paint && data.method == "ascent" && data.args.count() == 0) -> data.objVar.ascent()
    (data.objVar is Paint && data.method == "breakText" && data.args.count() == 5) -> data.objVar.breakText(data.args.get(0) as CharArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToFloat(data.args.get(3)), data.args.get(4) as FloatArray)
    (data.objVar is Paint && data.method == "breakText" && data.args.count() == 6) -> data.objVar.breakText(data.args.get(0) as CharSequence, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), data.args.get(3) as Boolean, anyToFloat(data.args.get(4)), data.args.get(5) as FloatArray)
    (data.objVar is Paint && data.method == "breakText" && data.args.count() == 4) -> data.objVar.breakText(data.args.get(0) as String, data.args.get(1) as Boolean, anyToFloat(data.args.get(2)), data.args.get(3) as FloatArray)
    (data.objVar is Paint && data.method == "clearShadowLayer" && data.args.count() == 0) -> data.objVar.clearShadowLayer()
    (data.objVar is Paint && data.method == "descent" && data.args.count() == 0) -> data.objVar.descent()
    (data.objVar is Paint && data.method == "getAlpha" && data.args.count() == 0) -> data.objVar.getAlpha()
    (data.objVar is Paint && data.method == "getColor" && data.args.count() == 0) -> data.objVar.getColor()
    (data.objVar is Paint && data.method == "getColorFilter" && data.args.count() == 0) -> data.objVar.getColorFilter()
    (data.objVar is Paint && data.method == "getFillPath" && data.args.count() == 2) -> data.objVar.getFillPath(data.args.get(0) as Path, data.args.get(1) as Path)
    (data.objVar is Paint && data.method == "getFlags" && data.args.count() == 0) -> data.objVar.getFlags()
    (data.objVar is Paint && data.method == "getFontFeatureSettings" && data.args.count() == 0) -> data.objVar.getFontFeatureSettings()
    (data.objVar is Paint && data.method == "getFontMetrics" && data.args.count() == 1) -> data.objVar.getFontMetrics(data.args.get(0) as Paint.FontMetrics)
    (data.objVar is Paint && data.method == "getFontMetrics" && data.args.count() == 0) -> data.objVar.getFontMetrics()
    (data.objVar is Paint && data.method == "getFontMetricsInt" && data.args.count() == 0) -> data.objVar.getFontMetricsInt()
    (data.objVar is Paint && data.method == "getFontMetricsInt" && data.args.count() == 1) -> data.objVar.getFontMetricsInt(data.args.get(0) as Paint.FontMetricsInt)
    (data.objVar is Paint && data.method == "getFontSpacing" && data.args.count() == 0) -> data.objVar.getFontSpacing()
    (data.objVar is Paint && data.method == "getHinting" && data.args.count() == 0) -> data.objVar.getHinting()
    (data.objVar is Paint && data.method == "getLetterSpacing" && data.args.count() == 0) -> data.objVar.getLetterSpacing()
    (data.objVar is Paint && data.method == "getMaskFilter" && data.args.count() == 0) -> data.objVar.getMaskFilter()
    (data.objVar is Paint && data.method == "getPathEffect" && data.args.count() == 0) -> data.objVar.getPathEffect()
    (data.objVar is Paint && data.method == "getRasterizer" && data.args.count() == 0) -> data.objVar.getRasterizer()
    (data.objVar is Paint && data.method == "getShader" && data.args.count() == 0) -> data.objVar.getShader()
    (data.objVar is Paint && data.method == "getStrokeCap" && data.args.count() == 0) -> data.objVar.getStrokeCap()
    (data.objVar is Paint && data.method == "getStrokeJoin" && data.args.count() == 0) -> data.objVar.getStrokeJoin()
    (data.objVar is Paint && data.method == "getStrokeMiter" && data.args.count() == 0) -> data.objVar.getStrokeMiter()
    (data.objVar is Paint && data.method == "getStrokeWidth" && data.args.count() == 0) -> data.objVar.getStrokeWidth()
    (data.objVar is Paint && data.method == "getStyle" && data.args.count() == 0) -> data.objVar.getStyle()
    (data.objVar is Paint && data.method == "getTextAlign" && data.args.count() == 0) -> data.objVar.getTextAlign()
    (data.objVar is Paint && data.method == "getTextBounds" && data.args.count() == 4) -> data.objVar.getTextBounds(data.args.get(0) as CharArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), data.args.get(3) as Rect)
    (data.objVar is Paint && data.method == "getTextBounds" && data.args.count() == 4) -> data.objVar.getTextBounds(data.args.get(0) as String, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), data.args.get(3) as Rect)
    (data.objVar is Paint && data.method == "getTextLocale" && data.args.count() == 0) -> data.objVar.getTextLocale()
    (data.objVar is Paint && data.method == "getTextPath" && data.args.count() == 6) -> data.objVar.getTextPath(data.args.get(0) as CharArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToFloat(data.args.get(3)), anyToFloat(data.args.get(4)), data.args.get(5) as Path)
    (data.objVar is Paint && data.method == "getTextPath" && data.args.count() == 6) -> data.objVar.getTextPath(data.args.get(0) as String, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToFloat(data.args.get(3)), anyToFloat(data.args.get(4)), data.args.get(5) as Path)
    (data.objVar is Paint && data.method == "getTextScaleX" && data.args.count() == 0) -> data.objVar.getTextScaleX()
    (data.objVar is Paint && data.method == "getTextSize" && data.args.count() == 0) -> data.objVar.getTextSize()
    (data.objVar is Paint && data.method == "getTextSkewX" && data.args.count() == 0) -> data.objVar.getTextSkewX()
    (data.objVar is Paint && data.method == "getTextWidths" && data.args.count() == 4) -> data.objVar.getTextWidths(data.args.get(0) as String, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), data.args.get(3) as FloatArray)
    (data.objVar is Paint && data.method == "getTextWidths" && data.args.count() == 2) -> data.objVar.getTextWidths(data.args.get(0) as String, data.args.get(1) as FloatArray)
    (data.objVar is Paint && data.method == "getTextWidths" && data.args.count() == 4) -> data.objVar.getTextWidths(data.args.get(0) as CharSequence, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), data.args.get(3) as FloatArray)
    (data.objVar is Paint && data.method == "getTextWidths" && data.args.count() == 4) -> data.objVar.getTextWidths(data.args.get(0) as CharArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), data.args.get(3) as FloatArray)
    (data.objVar is Paint && data.method == "getTypeface" && data.args.count() == 0) -> data.objVar.getTypeface()
    (data.objVar is Paint && data.method == "getXfermode" && data.args.count() == 0) -> data.objVar.getXfermode()
    (data.objVar is Paint && data.method == "isAntiAlias" && data.args.count() == 0) -> data.objVar.isAntiAlias()
    (data.objVar is Paint && data.method == "isDither" && data.args.count() == 0) -> data.objVar.isDither()
    (data.objVar is Paint && data.method == "isElegantTextHeight" && data.args.count() == 0) -> data.objVar.isElegantTextHeight()
    (data.objVar is Paint && data.method == "isFakeBoldText" && data.args.count() == 0) -> data.objVar.isFakeBoldText()
    (data.objVar is Paint && data.method == "isFilterBitmap" && data.args.count() == 0) -> data.objVar.isFilterBitmap()
    (data.objVar is Paint && data.method == "isLinearText" && data.args.count() == 0) -> data.objVar.isLinearText()
    (data.objVar is Paint && data.method == "isStrikeThruText" && data.args.count() == 0) -> data.objVar.isStrikeThruText()
    (data.objVar is Paint && data.method == "isSubpixelText" && data.args.count() == 0) -> data.objVar.isSubpixelText()
    (data.objVar is Paint && data.method == "isUnderlineText" && data.args.count() == 0) -> data.objVar.isUnderlineText()
    (data.objVar is Paint && data.method == "measureText" && data.args.count() == 1) -> data.objVar.measureText(data.args.get(0) as String)
    (data.objVar is Paint && data.method == "measureText" && data.args.count() == 3) -> data.objVar.measureText(data.args.get(0) as CharSequence, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)))
    (data.objVar is Paint && data.method == "measureText" && data.args.count() == 3) -> data.objVar.measureText(data.args.get(0) as String, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)))
    (data.objVar is Paint && data.method == "measureText" && data.args.count() == 3) -> data.objVar.measureText(data.args.get(0) as CharArray, anyToInt(data.args.get(1)), anyToInt(data.args.get(2)))
    (data.objVar is Paint && data.method == "reset" && data.args.count() == 0) -> data.objVar.reset()
    (data.objVar is Paint && data.method == "set" && data.args.count() == 1) -> data.objVar.set(data.args.get(0) as Paint)
    (data.objVar is Paint && data.method == "setARGB" && data.args.count() == 4) -> data.objVar.setARGB(anyToInt(data.args.get(0)), anyToInt(data.args.get(1)), anyToInt(data.args.get(2)), anyToInt(data.args.get(3)))
    (data.objVar is Paint && data.method == "setAlpha" && data.args.count() == 1) -> data.objVar.setAlpha(anyToInt(data.args.get(0)))
    (data.objVar is Paint && data.method == "setAntiAlias" && data.args.count() == 1) -> data.objVar.setAntiAlias(data.args.get(0) as Boolean)
    (data.objVar is Paint && data.method == "setColor" && data.args.count() == 1) -> data.objVar.setColor(anyToInt(data.args.get(0)))
    (data.objVar is Paint && data.method == "setColorFilter" && data.args.count() == 1) -> data.objVar.setColorFilter(data.args.get(0) as ColorFilter)
    (data.objVar is Paint && data.method == "setDither" && data.args.count() == 1) -> data.objVar.setDither(data.args.get(0) as Boolean)
    (data.objVar is Paint && data.method == "setElegantTextHeight" && data.args.count() == 1) -> data.objVar.setElegantTextHeight(data.args.get(0) as Boolean)
    (data.objVar is Paint && data.method == "setFakeBoldText" && data.args.count() == 1) -> data.objVar.setFakeBoldText(data.args.get(0) as Boolean)
    (data.objVar is Paint && data.method == "setFilterBitmap" && data.args.count() == 1) -> data.objVar.setFilterBitmap(data.args.get(0) as Boolean)
    (data.objVar is Paint && data.method == "setFlags" && data.args.count() == 1) -> data.objVar.setFlags(anyToInt(data.args.get(0)))
    (data.objVar is Paint && data.method == "setFontFeatureSettings" && data.args.count() == 1) -> data.objVar.setFontFeatureSettings(data.args.get(0) as String)
    (data.objVar is Paint && data.method == "setHinting" && data.args.count() == 1) -> data.objVar.setHinting(anyToInt(data.args.get(0)))
    (data.objVar is Paint && data.method == "setLetterSpacing" && data.args.count() == 1) -> data.objVar.setLetterSpacing(anyToFloat(data.args.get(0)))
    (data.objVar is Paint && data.method == "setLinearText" && data.args.count() == 1) -> data.objVar.setLinearText(data.args.get(0) as Boolean)
    (data.objVar is Paint && data.method == "setMaskFilter" && data.args.count() == 1) -> data.objVar.setMaskFilter(data.args.get(0) as MaskFilter)
    (data.objVar is Paint && data.method == "setPathEffect" && data.args.count() == 1) -> data.objVar.setPathEffect(data.args.get(0) as PathEffect)
    (data.objVar is Paint && data.method == "setRasterizer" && data.args.count() == 1) -> data.objVar.setRasterizer(data.args.get(0) as Rasterizer)
    (data.objVar is Paint && data.method == "setShader" && data.args.count() == 1) -> data.objVar.setShader(data.args.get(0) as Shader)
    (data.objVar is Paint && data.method == "setShadowLayer" && data.args.count() == 4) -> data.objVar.setShadowLayer(anyToFloat(data.args.get(0)), anyToFloat(data.args.get(1)), anyToFloat(data.args.get(2)), anyToInt(data.args.get(3)))
    (data.objVar is Paint && data.method == "setStrikeThruText" && data.args.count() == 1) -> data.objVar.setStrikeThruText(data.args.get(0) as Boolean)
    (data.objVar is Paint && data.method == "setStrokeCap" && data.args.count() == 1) -> data.objVar.setStrokeCap(data.args.get(0) as Paint.Cap)
    (data.objVar is Paint && data.method == "setStrokeJoin" && data.args.count() == 1) -> data.objVar.setStrokeJoin(data.args.get(0) as Paint.Join)
    (data.objVar is Paint && data.method == "setStrokeMiter" && data.args.count() == 1) -> data.objVar.setStrokeMiter(anyToFloat(data.args.get(0)))
    (data.objVar is Paint && data.method == "setStrokeWidth" && data.args.count() == 1) -> data.objVar.setStrokeWidth(anyToFloat(data.args.get(0)))
    (data.objVar is Paint && data.method == "setStyle" && data.args.count() == 1) -> data.objVar.setStyle(data.args.get(0) as Paint.Style)
    (data.objVar is Paint && data.method == "setSubpixelText" && data.args.count() == 1) -> data.objVar.setSubpixelText(data.args.get(0) as Boolean)
    (data.objVar is Paint && data.method == "setTextAlign" && data.args.count() == 1) -> data.objVar.setTextAlign(data.args.get(0) as Paint.Align)
    (data.objVar is Paint && data.method == "setTextLocale" && data.args.count() == 1) -> data.objVar.setTextLocale(data.args.get(0) as Locale)
    (data.objVar is Paint && data.method == "setTextScaleX" && data.args.count() == 1) -> data.objVar.setTextScaleX(anyToFloat(data.args.get(0)))
    (data.objVar is Paint && data.method == "setTextSize" && data.args.count() == 1) -> data.objVar.setTextSize(anyToFloat(data.args.get(0)))
    (data.objVar is Paint && data.method == "setTextSkewX" && data.args.count() == 1) -> data.objVar.setTextSkewX(anyToFloat(data.args.get(0)))
    (data.objVar is Paint && data.method == "setTypeface" && data.args.count() == 1) -> data.objVar.setTypeface(data.args.get(0) as Typeface)
    (data.objVar is Paint && data.method == "setUnderlineText" && data.args.count() == 1) -> data.objVar.setUnderlineText(data.args.get(0) as Boolean)
    (data.objVar is Paint && data.method == "setXfermode" && data.args.count() == 1) -> data.objVar.setXfermode(data.args.get(0) as Xfermode)
    (data.objVar == "Bitmap\$CompressFormat" && data.method == "valueOf" && data.args.count() == 1) -> Bitmap.CompressFormat.valueOf(data.args.get(0) as String)
    (data.objVar == "Bitmap\$CompressFormat" && data.method == "values" && data.args.count() == 0) -> Bitmap.CompressFormat.values()
    (data.objVar == "Shader\$TileMode" && data.method == "valueOf" && data.args.count() == 1) -> Shader.TileMode.valueOf(data.args.get(0) as String)
    (data.objVar == "Shader\$TileMode" && data.method == "values" && data.args.count() == 0) -> Shader.TileMode.values()
    (data.objVar == "Path\$Direction" && data.method == "valueOf" && data.args.count() == 1) -> Path.Direction.valueOf(data.args.get(0) as String)
    (data.objVar == "Path\$Direction" && data.method == "values" && data.args.count() == 0) -> Path.Direction.values()
    else -> throw Exception("Can't call ${data.method}")
}

fun doGet(vars: Map<String, Any?>, data: Get): Any = when {
    (data.objVar == "Typeface" && data.attr == "BOLD") -> Typeface.BOLD
    (data.objVar == "Typeface" && data.attr == "BOLD_ITALIC") -> Typeface.BOLD_ITALIC
    (data.objVar == "Typeface" && data.attr == "ITALIC") -> Typeface.ITALIC
    (data.objVar == "Typeface" && data.attr == "NORMAL") -> Typeface.NORMAL
    (data.objVar == "Canvas" && data.attr == "ALL_SAVE_FLAG") -> Canvas.ALL_SAVE_FLAG
    (data.objVar == "Canvas" && data.attr == "CLIP_SAVE_FLAG") -> Canvas.CLIP_SAVE_FLAG
    (data.objVar == "Canvas" && data.attr == "CLIP_TO_LAYER_SAVE_FLAG") -> Canvas.CLIP_TO_LAYER_SAVE_FLAG
    (data.objVar == "Canvas" && data.attr == "FULL_COLOR_LAYER_SAVE_FLAG") -> Canvas.FULL_COLOR_LAYER_SAVE_FLAG
    (data.objVar == "Canvas" && data.attr == "HAS_ALPHA_LAYER_SAVE_FLAG") -> Canvas.HAS_ALPHA_LAYER_SAVE_FLAG
    (data.objVar == "Canvas" && data.attr == "MATRIX_SAVE_FLAG") -> Canvas.MATRIX_SAVE_FLAG
    (data.objVar == "Bitmap" && data.attr == "DENSITY_NONE") -> Bitmap.DENSITY_NONE
    (data.objVar == "Matrix" && data.attr == "MPERSP_0") -> Matrix.MPERSP_0
    (data.objVar == "Matrix" && data.attr == "MPERSP_1") -> Matrix.MPERSP_1
    (data.objVar == "Matrix" && data.attr == "MPERSP_2") -> Matrix.MPERSP_2
    (data.objVar == "Matrix" && data.attr == "MSCALE_X") -> Matrix.MSCALE_X
    (data.objVar == "Matrix" && data.attr == "MSCALE_Y") -> Matrix.MSCALE_Y
    (data.objVar == "Matrix" && data.attr == "MSKEW_X") -> Matrix.MSKEW_X
    (data.objVar == "Matrix" && data.attr == "MSKEW_Y") -> Matrix.MSKEW_Y
    (data.objVar == "Matrix" && data.attr == "MTRANS_X") -> Matrix.MTRANS_X
    (data.objVar == "Matrix" && data.attr == "MTRANS_Y") -> Matrix.MTRANS_Y
    (data.objVar == "Color" && data.attr == "BLACK") -> Color.BLACK
    (data.objVar == "Color" && data.attr == "BLUE") -> Color.BLUE
    (data.objVar == "Color" && data.attr == "CYAN") -> Color.CYAN
    (data.objVar == "Color" && data.attr == "DKGRAY") -> Color.DKGRAY
    (data.objVar == "Color" && data.attr == "GRAY") -> Color.GRAY
    (data.objVar == "Color" && data.attr == "GREEN") -> Color.GREEN
    (data.objVar == "Color" && data.attr == "LTGRAY") -> Color.LTGRAY
    (data.objVar == "Color" && data.attr == "MAGENTA") -> Color.MAGENTA
    (data.objVar == "Color" && data.attr == "RED") -> Color.RED
    (data.objVar == "Color" && data.attr == "TRANSPARENT") -> Color.TRANSPARENT
    (data.objVar == "Color" && data.attr == "WHITE") -> Color.WHITE
    (data.objVar == "Color" && data.attr == "YELLOW") -> Color.YELLOW
    (data.objVar == "Paint" && data.attr == "ANTI_ALIAS_FLAG") -> Paint.ANTI_ALIAS_FLAG
    (data.objVar == "Paint" && data.attr == "DEV_KERN_TEXT_FLAG") -> Paint.DEV_KERN_TEXT_FLAG
    (data.objVar == "Paint" && data.attr == "DITHER_FLAG") -> Paint.DITHER_FLAG
    (data.objVar == "Paint" && data.attr == "EMBEDDED_BITMAP_TEXT_FLAG") -> Paint.EMBEDDED_BITMAP_TEXT_FLAG
    (data.objVar == "Paint" && data.attr == "FAKE_BOLD_TEXT_FLAG") -> Paint.FAKE_BOLD_TEXT_FLAG
    (data.objVar == "Paint" && data.attr == "FILTER_BITMAP_FLAG") -> Paint.FILTER_BITMAP_FLAG
    (data.objVar == "Paint" && data.attr == "HINTING_OFF") -> Paint.HINTING_OFF
    (data.objVar == "Paint" && data.attr == "HINTING_ON") -> Paint.HINTING_ON
    (data.objVar == "Paint" && data.attr == "LINEAR_TEXT_FLAG") -> Paint.LINEAR_TEXT_FLAG
    (data.objVar == "Paint" && data.attr == "STRIKE_THRU_TEXT_FLAG") -> Paint.STRIKE_THRU_TEXT_FLAG
    (data.objVar == "Paint" && data.attr == "SUBPIXEL_TEXT_FLAG") -> Paint.SUBPIXEL_TEXT_FLAG
    (data.objVar == "Paint" && data.attr == "UNDERLINE_TEXT_FLAG") -> Paint.UNDERLINE_TEXT_FLAG
    else -> throw Exception("Can't get non-constant ${data.attr}")
}
